// Code generated by protoc-gen-go. DO NOT EDIT.
// source: testapp.proto

package testapp

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_98d4e818d9f182b1, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func init() {
	proto.RegisterType((*Message)(nil), "Message")
}

func init() { proto.RegisterFile("testapp.proto", fileDescriptor_98d4e818d9f182b1) }

var fileDescriptor_98d4e818d9f182b1 = []byte{
	// 152 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x49, 0x2d, 0x2e,
	0x49, 0x2c, 0x28, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x92, 0xe5, 0x62, 0xf7, 0x4d, 0x2d,
	0x2e, 0x4e, 0x4c, 0x4f, 0x15, 0x12, 0xe2, 0x62, 0x29, 0x49, 0xad, 0x28, 0x91, 0x60, 0x54, 0x60,
	0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x8d, 0xb6, 0x32, 0x72, 0xf1, 0x87, 0xa4, 0x16, 0x97, 0x38, 0x16,
	0x14, 0xe4, 0x64, 0x26, 0x27, 0x96, 0x64, 0xe6, 0xe7, 0x09, 0xa9, 0x70, 0xf1, 0xb8, 0xe4, 0x87,
	0xe6, 0x25, 0x16, 0x55, 0x82, 0x09, 0x21, 0x0e, 0x3d, 0xa8, 0x09, 0x52, 0x70, 0x96, 0x12, 0x83,
	0x90, 0x3a, 0x17, 0x2f, 0x54, 0x55, 0x70, 0x49, 0x51, 0x6a, 0x62, 0x2e, 0x76, 0x65, 0x06, 0x8c,
	0x10, 0x85, 0x10, 0x35, 0x78, 0xcc, 0xd3, 0x60, 0x14, 0xd2, 0xe2, 0xe2, 0x83, 0x29, 0xc4, 0x67,
	0xa4, 0x06, 0xa3, 0x01, 0x63, 0x12, 0x1b, 0xd8, 0x77, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xeb, 0xe8, 0x29, 0x14, 0xee, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TestApplicationClient is the client API for TestApplication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestApplicationClient interface {
	DoUnaryUnary(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	DoUnaryStream(ctx context.Context, in *Message, opts ...grpc.CallOption) (TestApplication_DoUnaryStreamClient, error)
	DoStreamUnary(ctx context.Context, opts ...grpc.CallOption) (TestApplication_DoStreamUnaryClient, error)
	DoStreamStream(ctx context.Context, opts ...grpc.CallOption) (TestApplication_DoStreamStreamClient, error)
}

type testApplicationClient struct {
	cc *grpc.ClientConn
}

func NewTestApplicationClient(cc *grpc.ClientConn) TestApplicationClient {
	return &testApplicationClient{cc}
}

func (c *testApplicationClient) DoUnaryUnary(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/TestApplication/DoUnaryUnary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testApplicationClient) DoUnaryStream(ctx context.Context, in *Message, opts ...grpc.CallOption) (TestApplication_DoUnaryStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TestApplication_serviceDesc.Streams[0], "/TestApplication/DoUnaryStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testApplicationDoUnaryStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestApplication_DoUnaryStreamClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type testApplicationDoUnaryStreamClient struct {
	grpc.ClientStream
}

func (x *testApplicationDoUnaryStreamClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testApplicationClient) DoStreamUnary(ctx context.Context, opts ...grpc.CallOption) (TestApplication_DoStreamUnaryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TestApplication_serviceDesc.Streams[1], "/TestApplication/DoStreamUnary", opts...)
	if err != nil {
		return nil, err
	}
	x := &testApplicationDoStreamUnaryClient{stream}
	return x, nil
}

type TestApplication_DoStreamUnaryClient interface {
	Send(*Message) error
	CloseAndRecv() (*Message, error)
	grpc.ClientStream
}

type testApplicationDoStreamUnaryClient struct {
	grpc.ClientStream
}

func (x *testApplicationDoStreamUnaryClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testApplicationDoStreamUnaryClient) CloseAndRecv() (*Message, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testApplicationClient) DoStreamStream(ctx context.Context, opts ...grpc.CallOption) (TestApplication_DoStreamStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TestApplication_serviceDesc.Streams[2], "/TestApplication/DoStreamStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testApplicationDoStreamStreamClient{stream}
	return x, nil
}

type TestApplication_DoStreamStreamClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type testApplicationDoStreamStreamClient struct {
	grpc.ClientStream
}

func (x *testApplicationDoStreamStreamClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testApplicationDoStreamStreamClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestApplicationServer is the server API for TestApplication service.
type TestApplicationServer interface {
	DoUnaryUnary(context.Context, *Message) (*Message, error)
	DoUnaryStream(*Message, TestApplication_DoUnaryStreamServer) error
	DoStreamUnary(TestApplication_DoStreamUnaryServer) error
	DoStreamStream(TestApplication_DoStreamStreamServer) error
}

// UnimplementedTestApplicationServer can be embedded to have forward compatible implementations.
type UnimplementedTestApplicationServer struct {
}

func (*UnimplementedTestApplicationServer) DoUnaryUnary(ctx context.Context, req *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoUnaryUnary not implemented")
}
func (*UnimplementedTestApplicationServer) DoUnaryStream(req *Message, srv TestApplication_DoUnaryStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DoUnaryStream not implemented")
}
func (*UnimplementedTestApplicationServer) DoStreamUnary(srv TestApplication_DoStreamUnaryServer) error {
	return status.Errorf(codes.Unimplemented, "method DoStreamUnary not implemented")
}
func (*UnimplementedTestApplicationServer) DoStreamStream(srv TestApplication_DoStreamStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DoStreamStream not implemented")
}

func RegisterTestApplicationServer(s *grpc.Server, srv TestApplicationServer) {
	s.RegisterService(&_TestApplication_serviceDesc, srv)
}

func _TestApplication_DoUnaryUnary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestApplicationServer).DoUnaryUnary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TestApplication/DoUnaryUnary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestApplicationServer).DoUnaryUnary(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestApplication_DoUnaryStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Message)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestApplicationServer).DoUnaryStream(m, &testApplicationDoUnaryStreamServer{stream})
}

type TestApplication_DoUnaryStreamServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type testApplicationDoUnaryStreamServer struct {
	grpc.ServerStream
}

func (x *testApplicationDoUnaryStreamServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _TestApplication_DoStreamUnary_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestApplicationServer).DoStreamUnary(&testApplicationDoStreamUnaryServer{stream})
}

type TestApplication_DoStreamUnaryServer interface {
	SendAndClose(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type testApplicationDoStreamUnaryServer struct {
	grpc.ServerStream
}

func (x *testApplicationDoStreamUnaryServer) SendAndClose(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testApplicationDoStreamUnaryServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestApplication_DoStreamStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestApplicationServer).DoStreamStream(&testApplicationDoStreamStreamServer{stream})
}

type TestApplication_DoStreamStreamServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type testApplicationDoStreamStreamServer struct {
	grpc.ServerStream
}

func (x *testApplicationDoStreamStreamServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testApplicationDoStreamStreamServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TestApplication_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TestApplication",
	HandlerType: (*TestApplicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoUnaryUnary",
			Handler:    _TestApplication_DoUnaryUnary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DoUnaryStream",
			Handler:       _TestApplication_DoUnaryStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DoStreamUnary",
			Handler:       _TestApplication_DoStreamUnary_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DoStreamStream",
			Handler:       _TestApplication_DoStreamStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "testapp.proto",
}
